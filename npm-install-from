#!/usr/bin/env node

const { promises: fs } = require("fs")
const { spawn } = require("child_process")

/**
 * @param {string} command
 * @returns {Promise<string>}
 */
async function exec(command) {
	return new Promise((resolve, reject) => {
		const [cmd, ...args] = command.split(/\s+/)

		const child = spawn(cmd, args)

		let output = ""
		let stderr = ""

		child.stdout.on("data", (data) => {
			output += data
		})

		child.stderr.on("data", (data) => {
			output += data
			stderr += data
		})

		child.on("close", (code) => {
			if (code) {
				reject(stderr)
			} else {
				resolve(output)
			}
		})
	})
}

async function run() {
	const scope = process.argv[2] ?? ""

	if (scope) {
		const json = await fs.readFile("package.json").then((d) => JSON.parse(d.toString()))
		const dependencies = Object.keys({
			...json.dependencies,
			...json.devDependencies,
		}).filter((k) => k.startsWith(`${scope}/`))

		return exec(`npm i ${dependencies.join(" ")}`)
	}

	return exec("npm i")
}

module.exports = run()
