#!/usr/bin/env node

const { tmpdir } = require("os")
const { promises: fs } = require("fs")
const { basename, extname, join, dirname } = require("path")
const { exec: originalExec } = require("child_process")

/**
 * Execute a script and return a promise that resolves to stdout, or catches with stderr.
 * @param {string} command What to execute
 * @returns {Promise<string>}
 */
async function exec(command) {
	return new Promise((resolve, reject) => {
		originalExec(command, (error, stdout, stderr) => {
			if (error) {
				reject(stderr)
			} else {
				resolve(stdout)
			}
		})
	})
}

/**
 * The temp directory
 * @type {string}
 */
let tmp

process.on("exit", async () => {
	if (tmp) {
		return fs.rm(tmp, { recursive: true, force: true })
	}
})

async function run() {
	let currentTarget = 1

	if (process.argv.length == 2) {
		exit(-1)
	}

	tmp = await fs.mkdtemp(join(tmpdir(), basename(process.argv[1])))

	const args = process.argv.slice(2)

	/** @type {() => Promise<void>} */
	let pending = []
	/** Number currently running */
	let running = 0

	while (args.length > 0) {
		const arg = args.shift()

		if (arg.startsWith("-s")) {
			const size = arg.split("=")[1]

			currentTarget = parseFloat(size ?? args.shift())
		} else {
			switch (arg) {
				case "-h":
				case "--help":
				case "-?":
					exit()

					break
				default: {
					const size = await sizeOf(arg)

					if (size < currentTarget * 1000000) {
						console.log(`"${arg}" is already smaller than ${currentTarget}MB`)
					} else {
						const target = currentTarget
						const extension = extname(arg)
						const base = basename(arg, extension)

						const worker = async () => {
							running += 1

							try {
								await resize(
									target * 1000000,
									arg,
									`${base} (${currentTarget}MB)${extension}`,
									0,
									100,
									0,
									size
								)
							} catch (error) {
								console.error(`Failed to resize ${arg}:`, error)
							}

							running -= 1

							if (pending.length > 0) {
								pending.shift()()
							}
						}

						if (running < 6) {
							worker()
						} else {
							pending.push(worker)
						}
					}

					break
				}
			}
		}
	}

	async function sizeOf(/** @type {string} */ file) {
		const stat = await fs.stat(file)

		return stat.size
	}

	/**
	 * @param {number} target The target size
	 * @param {string} file
	 * @param {string} outFilename
	 * @param {number} lowerBound
	 * @param {number} upperBound
	 * @param {number} iteration
	 * @param {number} currentSize
	 */
	async function resize(
		target = currentTarget,
		file,
		outFilename,
		lowerBound,
		upperBound,
		iteration,
		currentSize
	) {
		/** A threshold below the target above which we can be satisfied with the size */
		const lowerThreshold = target * 0.99
		/** The midpoint between the lower and the upper limits */
		const midpoint = (upperBound - lowerBound) / 2 + lowerBound

		/** The temporary file in the temporary directory */
		const tmpOutFile = join(tmp, outFilename)

		// Resize the image to the midpoint between the current thresholds
		await exec(`convert "${file}" -resize "${midpoint}%" "${tmpOutFile}"`)

		// How big is it now?
		const size = await sizeOf(tmpOutFile)

		if (size > target) {
			return resize(
				target,
				file,
				outFilename,
				currentSize === size ? lowerBound / 2 : lowerBound,
				midpoint,
				iteration + 1,
				currentSize
			)
		} else if (size < lowerThreshold && iteration < 32 && currentSize !== size) {
			return resize(
				target,
				file,
				outFilename,
				midpoint,
				upperBound,
				iteration + 1,
				currentSize
			)
		}

		return fs.rename(tmpOutFile, join(dirname(file), outFilename))
	}

	function exit(code = 0) {
		console.error(
			`Usage: ${basename(process.argv[1])} [-s <size-in-mb>] <paths-to-images...>`
		)

		throw code
	}
}

module.exports = run()
